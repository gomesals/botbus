{"version":3,"sources":["../../src/js/checklist-model.js"],"names":["angular","module","directive","$parse","$compile","contains","arr","item","comparator","isArray","i","length","add","push","remove","splice","postLinkFn","scope","elem","attrs","checklistModel","$set","getter","setter","assign","checklistChange","checklistBeforeChange","value","checklistValue","$parent","equals","hasOwnProperty","checklistComparator","comparatorExpression","substring","a","b","$watch","ngModel","newValue","oldValue","setValueInChecklistModel","checked","current","isFunction","setChecked","newArr","oldArr","$watchCollection","restrict","priority","terminal","compile","tElement","tAttrs","tagName","type","btnCheckbox"],"mappings":"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","file":"checklist-model.js","sourcesContent":["/**\n * Checklist-model\n * AngularJS directive for list of checkboxes\n * https://github.com/vitalets/checklist-model\n * License: MIT http://opensource.org/licenses/MIT\n */\nangular.module('checklist-model', []).directive('checklistModel', ['$parse', '$compile', function($parse, $compile) {\n\t// contains\n\tfunction contains(arr, item, comparator) {\n\t\tif (angular.isArray(arr)) {\n\t\t\tfor (var i = arr.length; i--;) {\n\t\t\t\tif (comparator(arr[i], item)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t// add\n\tfunction add(arr, item, comparator) {\n\t\tarr = angular.isArray(arr) ? arr : [];\n\t\tif (!contains(arr, item, comparator)) {\n\t\t\tarr.push(item);\n\t\t}\n\t\treturn arr;\n\t}\n\t// remove\n\tfunction remove(arr, item, comparator) {\n\t\tif (angular.isArray(arr)) {\n\t\t\tfor (var i = arr.length; i--;) {\n\t\t\t\tif (comparator(arr[i], item)) {\n\t\t\t\t\tarr.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn arr;\n\t}\n\t// http://stackoverflow.com/a/19228302/1458162\n\tfunction postLinkFn(scope, elem, attrs) {\n\t\t// exclude recursion, but still keep the model\n\t\tvar checklistModel = attrs.checklistModel;\n\t\tattrs.$set(\"checklistModel\", null);\n\t\t// compile with `ng-model` pointing to `checked`\n\t\t$compile(elem)(scope);\n\t\tattrs.$set(\"checklistModel\", checklistModel);\n\t\t// getter / setter for original model\n\t\tvar getter = $parse(checklistModel);\n\t\tvar setter = getter.assign;\n\t\tvar checklistChange = $parse(attrs.checklistChange);\n\t\tvar checklistBeforeChange = $parse(attrs.checklistBeforeChange);\n\t\t// value added to list\n\t\tvar value = attrs.checklistValue ? $parse(attrs.checklistValue)(scope.$parent) : attrs.value;\n\t\tvar comparator = angular.equals;\n\t\tif (attrs.hasOwnProperty('checklistComparator')) {\n\t\t\tif (attrs.checklistComparator[0] == '.') {\n\t\t\t\tvar comparatorExpression = attrs.checklistComparator.substring(1);\n\t\t\t\tcomparator = function(a, b) {\n\t\t\t\t\treturn a[comparatorExpression] === b[comparatorExpression];\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tcomparator = $parse(attrs.checklistComparator)(scope.$parent);\n\t\t\t}\n\t\t}\n\t\t// watch UI checked change\n\t\tscope.$watch(attrs.ngModel, function(newValue, oldValue) {\n\t\t\tif (newValue === oldValue) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (checklistBeforeChange && (checklistBeforeChange(scope) === false)) {\n\t\t\t\tscope[attrs.ngModel] = contains(getter(scope.$parent), value, comparator);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetValueInChecklistModel(value, newValue);\n\t\t\tif (checklistChange) {\n\t\t\t\tchecklistChange(scope);\n\t\t\t}\n\t\t});\n\n\t\tfunction setValueInChecklistModel(value, checked) {\n\t\t\tvar current = getter(scope.$parent);\n\t\t\tif (angular.isFunction(setter)) {\n\t\t\t\tif (checked === true) {\n\t\t\t\t\tsetter(scope.$parent, add(current, value, comparator));\n\t\t\t\t} else {\n\t\t\t\t\tsetter(scope.$parent, remove(current, value, comparator));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// declare one function to be used for both $watch functions\n\t\tfunction setChecked(newArr, oldArr) {\n\t\t\tif (checklistBeforeChange && (checklistBeforeChange(scope) === false)) {\n\t\t\t\tsetValueInChecklistModel(value, scope[attrs.ngModel]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tscope[attrs.ngModel] = contains(newArr, value, comparator);\n\t\t}\n\t\t// watch original model change\n\t\t// use the faster $watchCollection method if it's available\n\t\tif (angular.isFunction(scope.$parent.$watchCollection)) {\n\t\t\tscope.$parent.$watchCollection(checklistModel, setChecked);\n\t\t} else {\n\t\t\tscope.$parent.$watch(checklistModel, setChecked, true);\n\t\t}\n\t}\n\treturn {\n\t\trestrict: 'A',\n\t\tpriority: 1000,\n\t\tterminal: true,\n\t\tscope: true,\n\t\tcompile: function(tElement, tAttrs) {\n\t\t\tif ((tElement[0].tagName !== 'INPUT' || tAttrs.type !== 'checkbox') && (tElement[0].tagName !== 'MD-CHECKBOX') && (!tAttrs.btnCheckbox)) {\n\t\t\t\tthrow 'checklist-model should be applied to `input[type=\"checkbox\"]` or `md-checkbox`.';\n\t\t\t}\n\t\t\tif (!tAttrs.checklistValue && !tAttrs.value) {\n\t\t\t\tthrow 'You should provide `value` or `checklist-value`.';\n\t\t\t}\n\t\t\t// by default ngModel is 'checked', so we set it if not specified\n\t\t\tif (!tAttrs.ngModel) {\n\t\t\t\t// local scope var storing individual checkbox model\n\t\t\t\ttAttrs.$set(\"ngModel\", \"checked\");\n\t\t\t}\n\t\t\treturn postLinkFn;\n\t\t}\n\t};\n}]);"]}